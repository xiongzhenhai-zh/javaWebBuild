## ---------------- 持久层接口  ---------------
## 持久层接口导包
#macro(idao_import)#end

## 持久层接口属性
#macro(idao_perporty)#end

## 持久层接口方法
#macro(idao_method)
	#set(Project project,Model model)
	/**	
	 * Name:修改${model.alies}	
	 * Params:	
	 *		${model.lowName}:${model.alies}实例		
	 */	
	public void update(${model.name} ${model.lowName}) throws Exception;	
	
#end

## ---------------- 持久层实现  ---------------
## 持久层实现导包
#macro(dao_import)#end

## 持久层实现属性
#macro(dao_perporty)#end

## 持久层实现方法
#macro(dao_method)
	#set(Project project,Model model)
   	public void update(${model.name} ${model.lowName}) throws Exception {	
		hibernateTemplate.update(${model.lowName});	
	}
	
#end

## ---------------- 业务层接口  ---------------
## 业务层接口导包
#macro(iservice_import)#end

## 业务层接口属性
#macro(iservice_perporty)#end

## 业务层接口方法
#macro(iservice_method)
	#set(Project project,Model model)
	/**	
	 * Name:修改${model.alies}	
	 * Params:	
	 *		${model.lowName}:${model.alies}实例		
	 */	
	public void modify(V${model.name} ${model.lowName}) throws Exception;	
	
#end

## ---------------- 业务层实现  ---------------
## 业务层实现导包
#macro(service_import)#end

## 业务层实现属性
#macro(service_perporty)#end

## 业务层实现方法
#macro(service_method)
	#set(Project project,Model model,Function function)
    public void modify(V${model.name} vo) throws Exception {	
		${model.name} ${model.lowName} = ${model.lowName}DAO.get(vo.getId());
		
		${model.lowName}.setValues(vo);
		
		#for(Relation relation:model.relations)
		#if(relation.type=="ManyToOne"||relation.type=="OneToOne")
		if(vo.get${relation.upName}Id()!=null&&vo.get${relation.upName}Id().trim().length()>0){
			${relation.relation.model.name} ${relation.relation.model.lowName}Temp = ${relation.relation.model.lowName}DAO.get(vo.get${relation.upName}Id());
			if(${relation.relation.model.lowName}Temp!=null){
				${model.lowName}.set${relation.upName}(${relation.relation.model.lowName}Temp);
				#set(tag = 1)
				#for(ModelAttribute attr:relation.relation.model.attributes)
				#if(tag==1&&attr.name=="alies")
				${model.lowName}.set${relation.upName}Name(${relation.relation.model.lowName}Temp.getAlies());
				#set(tag = 2)
				#else(tag==1&&attr.name=="name")
				${model.lowName}.set${relation.upName}Name(${relation.relation.model.lowName}Temp.getName());
				#set(tag = 2)
				#end
				#end
				#if(tag==1)
				${model.lowName}.set${relation.upName}Name(${relation.relation.model.lowName}Temp.getId());
				#end
			}
		}
		#end
		#end
		${model.lowName}DAO.update(${model.lowName});
	}
	
#end

## ---------------- 控制层实现  ---------------
## 控制层实现导包
#macro(action_import)#end

## 控制层实现属性
#macro(action_perporty)#end

## 控制层实现方法
#macro(action_method)
	#set(Project project,Model model)
    @Action("/private/${model.lowName}/modify")	
	public String modify() throws Exception {
		${model.lowName}Service.modify(${model.lowName});	
		result.put("success", true);	
		return "json";	
	}
	
#end