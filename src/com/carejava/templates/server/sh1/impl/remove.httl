## ---------------- 持久层接口  ---------------
## 持久层接口导包
#macro(idao_import)#end

## 持久层接口属性
#macro(idao_perporty)#end

## 持久层接口方法
#macro(idao_method)
	#set(Project project,Model model)
	/**	
	 * Name:删除${model.alies}	
	 * Params:	
	 *		id:${model.alies}ID	
	 */	
	public void delete(String id) throws Exception;
#end

## ---------------- 持久层实现  ---------------
## 持久层实现导包
#macro(dao_import)#end

## 持久层实现属性
#macro(dao_perporty)#end

## 持久层实现方法
#macro(dao_method)
	#set(Project project,Model model)
    public void delete(String id) throws Exception {	
		hibernateTemplate.delete(hibernateTemplate.get(${model.name}.class, id));	
	}	
	
#end

## ---------------- 业务层接口  ---------------
## 业务层接口导包
#macro(iservice_import)#end

## 业务层接口属性
#macro(iservice_perporty)#end

## 业务层接口方法
#macro(iservice_method)
    #set(Project project,Model model)
	/**	
	 * Name:删除${model.alies}	
	 * Params:	
	 *		id:${model.alies}ID	
	 */	
	public void remove(${model.name} ${model.lowName}) throws Exception;
	
#end

## ---------------- 业务层实现  ---------------
## 业务层实现导包
#macro(service_import)#end

## 业务层实现属性
#macro(service_perporty)#end

## 业务层实现方法
#macro(service_method)
    #set(Project project,Model model)
    public void remove(${model.name} ${model.lowName}) throws Exception {	
		${model.lowName}DAO.delete(${model.lowName}.getId());	
	}
	
#end

## ---------------- 控制层实现  ---------------
## 控制层实现导包
#macro(action_import)#end

## 控制层实现属性
#macro(action_perporty)#end

## 控制层实现方法
#macro(action_method)
    #set(Project project,Model model)
	@RequestMapping("/${model.lowName}/remove")
        @ResponseBody	
	public JsonResult<String> remove() throws Exception {
                JsonResult<String> jr=null;	
		${model.lowName}Service.remove(${model.lowName});	
		jr=new JsonResult<String>(true,"成功");	
		return jr;	
	}	
	
#end